@page "/register"
@inject UserService UserService
@inject NavigationManager NavigationManager
@using Project_MAUI.Components.Layout
@using Project_MAUI.Components.Model
@layout FirstLayout

<h3>Sign Up</h3>

<div class="signup_page">
    <div class="signup_box">
        <input @bind="RegisterUsername" placeholder="Username" />
        <input @bind="RegisterPassword" placeholder="Password" type="password" />
        <input @bind="RegisterEmail" placeholder="Email" />
        <button @onclick="RegisterPage">Register</button>
        <p>Already have an account?<u><a href="/">Login</a></u></p>

        @if (!string.IsNullOrEmpty(Message))
        {
            <p>@Message</p>
        }

        <!-- Currency Section -->
        <div class="currency_section">
            <label for="currency">Preferred Currency:</label>
            <select id="currency" @onchange="UpdateCurrency">
                @if (CurrencyOptions != null && CurrencyOptions.Any())
                {
                    @foreach (var currency in CurrencyOptions)
                    {
                        <option value="@currency">@currency</option>
                    }
                }
                else
                {
                    <option disabled>No currencies available</option>
                }
            </select>
        </div>
    </div>
</div>

@code {
    private string RegisterUsername = "";
    private string RegisterPassword = "";
    private string RegisterEmail = "";
    private string Message = "";

    private List<User> Users = new();
    private string SelectedCurrency = "USD"; // Default currency
    private List<string> CurrencyOptions;
    private Dictionary<string, decimal> ExchangeRates = new()
    {
        { "USD", 1.0m },
        { "EUR", 0.85m },
        { "GBP", 0.75m },
        { "INR", 75.0m },
        { "JPY", 110.0m }
    };

    protected override void OnInitialized()
    {
        // Populate CurrencyOptions
        CurrencyOptions = new List<string>(ExchangeRates.Keys);

        // Debugging log
        Console.WriteLine($"CurrencyOptions initialized: {string.Join(", ", CurrencyOptions)}");

        // Load users
        Users = UserService.LoadUsers();
    }

    private void RegisterPage()
    {
        if (string.IsNullOrWhiteSpace(RegisterUsername) || string.IsNullOrWhiteSpace(RegisterPassword))
        {
            Message = "Username and password are required.";
            return;
        }

        if (Users.Any(u => u.Username == RegisterUsername))
        {
            Message = "Username already exists.";
            return;
        }

        // Create new user and hash the password
        var newUser = new User
            {
                Username = RegisterUsername,
                Password = UserService.HashPassword(RegisterPassword),
                Email = RegisterEmail
            };

        Users.Add(newUser);
        UserService.SaveUsers(Users);

        Message = "Registration successful. Redirecting to login...";
        Task.Delay(2000).ContinueWith(_ => NavigationManager.NavigateTo("/"));
    }

    private void UpdateCurrency(ChangeEventArgs e)
    {
        if (e.Value is string selectedValue)
        {
            SelectedCurrency = selectedValue;
            Message = $"Currency changed to {SelectedCurrency}. All transactions will now display in {SelectedCurrency}.";
            Console.WriteLine($"Currency updated to: {SelectedCurrency}"); // Debugging log
            StateHasChanged();
        }
        else
        {
            Message = "Failed to update currency. Please try again.";
        }
    }
}

<style>
    .signup_page {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        padding: 20px;
        background-color: #fff;
    }

    h3 {
        color: #94C38A;
        font-size: 2rem;
        margin-bottom: 2rem;
        font-weight: bold;
    }

    .signup_box {
        background-color: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(248, 113, 113, 0.1);
        width: 100%;
        max-width: 400px;
    }

    input {
        width: 100%;
        padding: 12px;
        margin: 8px 0;
        border: 2px solid #f0f0f0;
        border-radius: 4px;
        font-size: 1rem;
        transition: border-color 0.3s ease;
    }

        input:focus {
            outline: none;
            border-color: #94C38A;
        }

    button {
        width: 100%;
        padding: 12px;
        background-color: #94C38A;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.3s ease;
        margin: 16px 0;
    }

        button:hover {
            background-color: #ef4444;
        }

        button:active {
            transform: scale(0.98);
        }

    p {
        color: #94C38A;
        text-align: center;
        margin-top: 1rem;
        font-size: 0.9rem;
    }

    .currency_section {
        margin-top: 1rem;
        text-align: center;
    }

    select {
        padding: 10px;
        font-size: 1rem;
        border: 2px solid #f0f0f0;
        border-radius: 4px;
        margin-top: 8px;
    }

        select:focus {
            border-color: #94C38A;
            outline: none;
        }
</style>
